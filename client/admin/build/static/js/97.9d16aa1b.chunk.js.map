{"version":3,"sources":["routes/Statistics/Edit/index.jsx"],"names":["FormItem","Form","Item","Registration","state","title","count","disable","componentDidMount","id","_this","props","match","params","axios","concat","then","result","data","setState","Object","E_Mohannad_snackcontent_Informative_Dash_client_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","post","message","NotificationManager","success","setTimeout","history","push","catch","_ref","E_Mohannad_snackcontent_Informative_Dash_client_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","E_Mohannad_snackcontent_Informative_Dash_client_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","error","_error$response","statusText","wrap","_context","prev","next","response","stop","_x","apply","this","arguments","getFieldDecorator","_this$state","formItemLayout","labelCol","xs","span","sm","wrapperCol","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","antd__WEBPACK_IMPORTED_MODULE_10__","className","antd__WEBPACK_IMPORTED_MODULE_9__","onSubmit","assign","label","initialValue","rules","max","required","antd__WEBPACK_IMPORTED_MODULE_11__","whitespace","type","offset","antd__WEBPACK_IMPORTED_MODULE_12__","disabled","htmlType","react_notifications__WEBPACK_IMPORTED_MODULE_14__","Component","RegistrationForm","create"],"mappings":"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","file":"static/js/97.9d16aa1b.chunk.js","sourcesContent":["/* eslint-disable camelcase */\r\n/* eslint-disable react/sort-comp */\r\n/* eslint-disable no-console */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable no-cond-assign */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-constant-condition */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable react/jsx-closing-bracket-location */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable react/jsx-one-expression-per-line */\r\n/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable linebreak-style */\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Button, Card, Form, Input,\r\n} from 'antd';\r\nimport axios from 'axios';\r\nimport {\r\n  NotificationContainer,\r\n  NotificationManager,\r\n} from 'react-notifications';\r\n\r\nconst FormItem = Form.Item;\r\n\r\nclass Registration extends Component {\r\n    state = {\r\n      title: '',\r\n      count: '',\r\n      disable: false,\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      const { match: { params: { id } } } = this.props;\r\n      axios(`/api/v2/statistics/${id}`).then((result) => {\r\n        const { data } = result;\r\n        this.setState({ ...data });\r\n      });\r\n    }\r\n\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        this.setState({ disable: true });\r\n        const { match: { params: { id } } } = this.props;\r\n        axios\r\n          .post(`/api/v2/statistics/update/${id}`, values)\r\n          .then((result) => {\r\n            const {\r\n              data: { message },\r\n            } = result;\r\n            NotificationManager.success(message, 'SUCCESS', 2000);\r\n            setTimeout(() => {\r\n              this.props.history.push('/admin/statistics/view');\r\n              this.setState({ disable: false });\r\n            }, 3000);\r\n          })\r\n          .catch(async (error) => {\r\n            const {\r\n              data: { message },\r\n              statusText,\r\n            } = error.response;\r\n            NotificationManager.error(message || statusText, 'ERROR', 2000);\r\n            setTimeout(() => {\r\n              this.setState({ disable: false });\r\n            }, 2000);\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { title, count,disable } = this.state;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 6 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 18 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Statistic Details\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormItem {...formItemLayout} label={<span>Title</span>}>\r\n            {getFieldDecorator('title', {\r\n              initialValue: title,\r\n              rules: [\r\n                {\r\n                  max: 20,\r\n                  message: 'Max is 20 letter',\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: 'Please enter the title',\r\n                },\r\n              ],\r\n            })(<Input />)}\r\n          </FormItem>\r\n          <FormItem {...formItemLayout} label={<span>Count</span>}>\r\n            {getFieldDecorator('count', {\r\n              initialValue: count,\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please input the subtitle!',\r\n                  whitespace: true,\r\n                },\r\n              ],\r\n            })(<Input type=\"number\" />)}\r\n          </FormItem>\r\n          <FormItem {...tailFormItemLayout}>\r\n            {!disable\r\n            ? (\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n              Save\r\n                </Button>\r\n            )\r\n            : (\r\n                <Button type=\"primary\" disabled htmlType=\"submit\">\r\n         Save\r\n                </Button>\r\n            ) }\r\n          </FormItem>\r\n        </Form>\r\n        <NotificationContainer />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst RegistrationForm = Form.create()(Registration);\r\nexport default RegistrationForm;\r\n"],"sourceRoot":""}