{"version":3,"sources":["routes/Partners/Settings/index.jsx"],"names":["FormItem","Form","Item","TextArea","Input","Registration","state","partnerstitle","partnerssub","componentDidMount","axios","then","result","_data$","data","_this","setState","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","post","message","NotificationManager","success","setTimeout","history","push","catch","_ref","Object","E_Mohannad_snackcontent_Informative_Dash_client_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","E_Mohannad_snackcontent_Informative_Dash_client_admin_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","error","_error$response","statusText","wrap","_context","prev","next","response","stop","_x","apply","this","arguments","getFieldDecorator","_this$state","formItemLayout","labelCol","xs","span","sm","wrapperCol","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","antd__WEBPACK_IMPORTED_MODULE_10__","className","title","antd__WEBPACK_IMPORTED_MODULE_8__","onSubmit","assign","label","initialValue","rules","max","antd__WEBPACK_IMPORTED_MODULE_9__","offset","antd__WEBPACK_IMPORTED_MODULE_11__","type","htmlType","react_notifications__WEBPACK_IMPORTED_MODULE_13__","Component","RegistrationForm","create"],"mappings":"oPAyBMA,EAAWC,IAAKC,KACdC,EAAaC,IAAbD,SAEFE,6MACJC,MAAQ,CACNC,cAAe,GAAIC,YAAa,MAGlCC,kBAAoB,WAClBC,IAAM,oBAAoBC,KAAK,SAACC,GAAW,IAAAC,EACxBD,EAATE,KACoC,GAApCP,EAFiCM,EAEjCN,cAAeC,EAFkBK,EAElBL,YACvBO,EAAKC,SAAS,CAAET,gBAAeC,qBAInCS,aAAe,SAACC,GACdA,EAAEC,iBACFJ,EAAKK,MAAMC,KAAKC,wBAAwB,SAACC,EAAKC,GACvCD,GACHb,IACGe,KAAK,wBAAyBD,GAC9Bb,KAAK,SAACC,GAAW,IAENc,EACNd,EADFE,KAAQY,QAEVC,sBAAoBC,QAAQF,EAAS,UAAW,KAChDG,WAAW,WACTd,EAAKK,MAAMU,QAAQC,KAAK,yBACvB,OAEJC,MAXH,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAWS,SAAAC,EAAOC,GAAP,IAAAC,EAAAf,EAAAgB,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAL,EAIDD,EAAMO,SAFArB,EAFLe,EAEH3B,KAAQY,QACRgB,EAHGD,EAGHC,WAEFf,sBAAoBa,MAAMd,GAAWgB,EAAY,QAAS,KALrD,wBAAAE,EAAAI,SAAAT,MAXT,gBAAAU,GAAA,OAAAhB,EAAAiB,MAAAC,KAAAC,YAAA,+EAuBG,IACCC,EAAsBF,KAAK/B,MAAMC,KAAjCgC,kBADDC,EAEgCH,KAAK7C,MAApCC,EAFD+C,EAEC/C,cAAeC,EAFhB8C,EAEgB9C,YACjB+C,EAAiB,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAehB,OACEG,EAAAxB,EAAAyB,cAACC,EAAA,EAAD,CAAMC,UAAU,UAAUC,MAAM,WAC9BJ,EAAAxB,EAAAyB,cAACI,EAAA,EAAD,CAAMC,SAAUhB,KAAKlC,cACnB4C,EAAAxB,EAAAyB,cAAC9D,EAADkC,OAAAkC,OAAA,GAAcb,EAAd,CAA8Bc,MAAOR,EAAAxB,EAAAyB,cAAA,uBAClCT,EAAkB,gBAAiB,CAClCiB,aAAc/D,EACdgE,MAAO,CACL,CACEC,IAAK,GACL9C,QAAS,sBALd2B,CASEQ,EAAAxB,EAAAyB,cAACW,EAAA,EAAD,QAELZ,EAAAxB,EAAAyB,cAAC9D,EAADkC,OAAAkC,OAAA,GAAcb,EAAd,CAA8Bc,MAAOR,EAAAxB,EAAAyB,cAAA,0BAClCT,EAAkB,cAAe,CAChCiB,aAAc9D,GADf6C,CAEEQ,EAAAxB,EAAAyB,cAAC3D,EAAD,QAEL0D,EAAAxB,EAAAyB,cAAC9D,EAhCoB,CACzB4D,WAAY,CACVH,GAAI,CACFC,KAAM,GACNgB,OAAQ,GAEVf,GAAI,CACFD,KAAM,GACNgB,OAAQ,KAyBNb,EAAAxB,EAAAyB,cAACa,EAAA,EAAD,CAAQC,KAAK,UAAUC,SAAS,UAAhC,YAKJhB,EAAAxB,EAAAyB,cAACgB,EAAA,sBAAD,cA3FmBC,aAiGrBC,EAAmB/E,IAAKgF,QAALhF,CAAcI,GACxB2E","file":"static/js/83.ae90e4d9.chunk.js","sourcesContent":["/* eslint-disable camelcase */\r\n/* eslint-disable react/sort-comp */\r\n/* eslint-disable no-console */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable no-cond-assign */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-constant-condition */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable react/jsx-closing-bracket-location */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable react/jsx-one-expression-per-line */\r\n/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable linebreak-style */\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  Input,\r\n} from 'antd';\r\nimport axios from 'axios';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\n\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input;\r\n\r\nclass Registration extends Component {\r\n  state = {\r\n    partnerstitle: '', partnerssub: '',\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    axios('/api/v2/getTitle').then((result) => {\r\n      const { data } = result;\r\n      const { partnerstitle, partnerssub } = data[0];\r\n      this.setState({ partnerstitle, partnerssub });\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        axios\r\n          .post('/api/v2/titles/update', values)\r\n          .then((result) => {\r\n            const {\r\n              data: { message },\r\n            } = result;\r\n            NotificationManager.success(message, 'SUCCESS', 2000);\r\n            setTimeout(() => {\r\n              this.props.history.push('/admin/partners/view');\r\n            }, 3000);\r\n          })\r\n          .catch(async (error) => {\r\n            const {\r\n              data: { message },\r\n              statusText,\r\n            } = error.response;\r\n            NotificationManager.error(message || statusText, 'ERROR', 2000);\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { partnerstitle, partnerssub } = this.state;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 6 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 18 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Setting\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormItem {...formItemLayout} label={<span>Title</span>}>\r\n            {getFieldDecorator('partnerstitle', {\r\n              initialValue: partnerstitle,\r\n              rules: [\r\n                {\r\n                  max: 20,\r\n                  message: 'Max is 20 letter',\r\n\r\n                },\r\n              ],\r\n            })(<Input />)}\r\n          </FormItem>\r\n          <FormItem {...formItemLayout} label={<span>subtitle</span>}>\r\n            {getFieldDecorator('partnerssub', {\r\n              initialValue: partnerssub,\r\n            })(<TextArea />)}\r\n          </FormItem>\r\n          <FormItem {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Update\r\n            </Button>\r\n          </FormItem>\r\n        </Form>\r\n        <NotificationContainer />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst RegistrationForm = Form.create()(Registration);\r\nexport default RegistrationForm;\r\n"],"sourceRoot":""}