{"version":3,"sources":["routes/Posts/Hero/View/index.jsx"],"names":["expandedRowRender","record","ReactHtmlParser","description","Dynamic","state","data","columns","delete","id","axios","post","then","res","message","statusText","status","NotificationManager","success","setTimeout","final","_this","filter","element","setState","error","componentWillMount","get","result","title","dataIndex","key","sorter","a","b","props","children","length","width","map","action","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","antd__WEBPACK_IMPORTED_MODULE_9__","onConfirm","okText","cancelText","className","href","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","concat","_this$state","this","antd__WEBPACK_IMPORTED_MODULE_10__","antd__WEBPACK_IMPORTED_MODULE_11__","Object","assign","dataSource","react_notifications__WEBPACK_IMPORTED_MODULE_12__","React","Component"],"mappings":"+OAgBMA,EAAoB,SAAAC,GAAM,OAAIC,IAAgBD,EAAOE,cAErDC,6MACJC,MAAQ,CACNL,oBACAM,KAAM,GACNC,QAAS,MAGXC,OAAS,SAACC,GACRC,IAAMC,KAAK,wBAAyB,CAAEL,KAAM,CAAEG,QAAQG,KAAK,SAACC,GAAQ,IAExDC,EAEND,EAFFP,KAAQQ,QACRC,EACEF,EADFE,WAEiB,MAAfF,EAAIG,QACNC,sBAAoBC,QAAQJ,EAAS,UAAW,KAChDK,WAAW,WAAM,IAETC,EADWC,EAAKhB,MAAdC,KACWgB,OAAO,SAAAC,GAAO,OAAIA,EAAQd,KAAOA,IACpDY,EAAKG,SAAS,CAAElB,KAAMc,KACrB,MAEHH,sBAAoBQ,MAAMX,GAAWC,EAAY,QAAS,UAKhEW,mBAAqB,WACnBhB,IAAMiB,IAAI,mBAAmBf,KAAK,SAACgB,GAAW,IACpCtB,EAASsB,EAATtB,KAeRe,EAAKG,SAAS,CAAEjB,QAdA,CACd,CACEsB,MAAO,OACPC,UAAW,QACXC,IAAK,OACLC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEJ,MAAMM,MAAMC,SAASC,OAASH,EAAEL,MAAMM,MAAMC,SAASC,SAE3E,CACER,MAAO,SACPE,IAAK,SACLD,UAAW,SACXQ,MAAO,QAIXhC,EAAKiC,IAAI,SAAChB,GAgBR,OAfAA,EAAQiB,OACNC,EAAAR,EAAAS,cAAA,YACED,EAAAR,EAAAS,cAACC,EAAA,EAAD,CACEd,MAAM,mDACNe,UAAW,kBAAMvB,EAAKb,OAAOe,EAAQd,KACrCoC,OAAO,MACPC,WAAW,MAEXL,EAAAR,EAAAS,cAAA,KAAGK,UAAU,0BAA0BC,KAAK,QAIlDzB,EAAQM,MACNY,EAAAR,EAAAS,cAACO,EAAA,EAAD,CAAMC,GAAE,gBAAAC,OAAkB5B,EAAQd,KAAOc,EAAQM,OAE5CN,IAETF,EAAKG,SAAS,iBAAO,CAAElB,qFAIlB,IAAA8C,EACmBC,KAAKhD,MAAvBC,EADD8C,EACC9C,KAAMC,EADP6C,EACO7C,QACd,OACEkC,EAAAR,EAAAS,cAACY,EAAA,EAAD,CAAMzB,MAAM,sBACVY,EAAAR,EAAAS,cAACa,EAAA,EAADC,OAAAC,OAAA,CACEV,UAAU,uBACNM,KAAKhD,MAFX,CAGEE,QAASA,EACTmD,WAAYpD,KAEdmC,EAAAR,EAAAS,cAACiB,EAAA,sBAAD,cA5EcC,IAAMC,WAkFbzD","file":"static/js/64.cbf60274.chunk.js","sourcesContent":["/* eslint-disable no-return-assign */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable react/jsx-one-expression-per-line */\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Card,\r\n  Table,\r\n  Popconfirm,\r\n} from 'antd';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\n\r\nconst expandedRowRender = record => ReactHtmlParser(record.description);\r\n\r\nclass Dynamic extends React.Component {\r\n  state = {\r\n    expandedRowRender,\r\n    data: [],\r\n    columns: [],\r\n  };\r\n\r\n  delete = (id) => {\r\n    axios.post('/api/v2/removeheading', { data: { id } }).then((res) => {\r\n      const {\r\n        data: { message },\r\n        statusText,\r\n      } = res;\r\n      if (res.status === 200) {\r\n        NotificationManager.success(message, 'SUCCESS', 2000);\r\n        setTimeout(() => {\r\n          const { data } = this.state;\r\n          const final = data.filter(element => element.id !== id);\r\n          this.setState({ data: final });\r\n        }, 3000);\r\n      } else {\r\n        NotificationManager.error(message || statusText, 'ERROR', 2000);\r\n      }\r\n    });\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    axios.get('/api/v2/heading').then((result) => {\r\n      const { data } = result;\r\n      const columns = [\r\n        {\r\n          title: 'Name',\r\n          dataIndex: 'title',\r\n          key: 'name',\r\n          sorter: (a, b) => a.title.props.children.length - b.title.props.children.length,\r\n        },\r\n        {\r\n          title: 'Action',\r\n          key: 'action',\r\n          dataIndex: 'action',\r\n          width: 360,\r\n        },\r\n      ];\r\n      this.setState({ columns });\r\n      data.map((element) => {\r\n        element.action = (\r\n          <span>\r\n            <Popconfirm\r\n              title=\"Are you sure remove this post from hero section?\"\r\n              onConfirm={() => this.delete(element.id)}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n            >\r\n              <a className=\"gx-mb-3 icon icon-trash\" href=\"/\" />\r\n            </Popconfirm>\r\n          </span>\r\n        );\r\n        element.title = (\r\n          <Link to={`/admin/posts/${element.id}`}>{element.title}</Link>\r\n        );\r\n        return element;\r\n      });\r\n      this.setState(() => ({ data }));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data, columns } = this.state;\r\n    return (\r\n      <Card title=\"Hero Section Posts\">\r\n        <Table\r\n          className=\"gx-table-responsive\"\r\n          {...this.state}\r\n          columns={columns}\r\n          dataSource={data}\r\n        />\r\n        <NotificationContainer />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dynamic;\r\n"],"sourceRoot":""}